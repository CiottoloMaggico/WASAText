openapi: 3.0.3
info:
  title: WASAText - OpenAPI 3.0.3
  description: |-
    Connect with your friends effortlessly using WASAText! Send and receive messages, whether one-on-one
    or in groups, all from the convenience of your PC. Enjoy seamless conversations with text or GIFs and
    easily stay in touch through your private chats or group discussions.
  contact:
    email: fantozzi.2047034@studenti.uniroma1.it
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://api.wasatext.com/api/v1
    description: Production server
tags:
  - name: conversations
  - name: groups
  - name: chats
  - name: messages
  - name: user
paths:
  /conversations:
    get:
      tags:
        - conversations
      summary: Get the list of all conversations
      operationId: getConversations
      parameters:
        - $ref: "#/components/parameters/pageOffset"
        - $ref: "#/components/parameters/pageNumber"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  conversations:
                    $ref: "#/components/schemas/Conversation"
        "400":
          $ref: "#/components/responses/400"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /conversations/{conv_id}:
    get:
      tags:
        - conversations
      summary: Get the detail of a particular conversation
      operationId: getConversation
      parameters:
        - $ref: "#/components/parameters/conversationId"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationDetail"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /conversation/{conv_id}/messages:
    get:
      tags:
        - messages
      summary: Get all messages of a particular conversation
      operationId: getMessages
      parameters:
        - $ref: "#/components/parameters/conversationId"
        - $ref: "#/components/parameters/pageOffset"
        - $ref: "#/components/parameters/pageNumber"
        - name: sort
          in: query
          description: Sort messages
          schema:
            type: string
            default: "sent_desc"
            enum: ["sent", "sent_desc"]
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  conversations:
                    $ref: "#/components/schemas/Message"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /groups/{group_id}/participants:
    parameters:
      - $ref: "#/components/parameters/groupId"
    get:
      tags:
        - groups
      summary: get the lists of all group participants
      operationId: getParticipants
      responses:
        "200":
          description: Succesful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - users
                properties:
                  users:
                    type: array
                    minItems: 1
                    items:
                      $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: "^.*?$"
                  minLength: 3
                  maxLength: 16
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"

  /user/{user_id}:
    get:
      tags:
        - user
      summary: retrieve specific user informations
      operationId: getUserInfo
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /user/{user_id}/name:
    put:
      tags:
        - user
      summary: Set or change the username
      operationId: setMyUserName
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "200":
          $ref: "#/components/responses/200"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /user/{user_id}/photo:
    put:
      tags:
        - user
      summary: Set or change the user photo
      operationId: setMyPhoto
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                imageId:
                  $ref: "#/components/schemas/Idgrez64"
      responses:
        "200":
          $ref: "#/components/responses/200"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /user/{user_id}/conversations:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags:
        - conversations
      summary: retrieve all the user conversations
      description: |
        This method returns all the conversations of the user either groups or one to one chats
      operationId: getMyConversations
      parameters:
        - $ref: "#/components/parameters/pageOffset"
        - $ref: "#/components/parameters/pageNumber"
        - name: sort
          description: sort the returned set by read/unread property, first unread then read or otherwise
          in: query
          schema:
            type: string
            default: "read"
            enum: ["read", "read_desc"]
      responses:
        "200":
          description: Succesful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  conversations:
                    $ref: "#/components/schemas/Conversation"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

    put:
      tags:
        - conversations
      summary: set all undelivered message as delivered
      description: |
        This method is used to set all the undelivered messages from all user conversations as delivered.
      operationId: setDelivered
      responses:
        "200":
          $ref: "#/components/responses/200"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /users/{user_id}/conversations/{conv_id}/messages:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/conversationId"
    post:
      tags:
        - messages
      summary: send a new message to the conversation
      operationId: sendMessage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                attachmentUrl:
                  # allow only backend domain
                  type: string
                  format: url
      responses:
        "201":
          description: message sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: "#/components/schemas/Idgrez64"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"
    put:
      tags:
        - messages
      summary: set all unseen messages to seen
      description: |
        This method marks all the undelivered/delivered messages as seen by the given user.
      operationId: setSeen
      responses:
        "200":
          $ref: "#/components/responses/200"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"
    get:
      tags:
        - messages
      summary: retrieve all messages from the conversation
      description: |
        This methods returns the list of all messages of the conversation, by default sorted by descending send date-time
      operationId: getConversationMessages
      parameters:
        - $ref: "#/components/parameters/pageOffset"
        - $ref: "#/components/parameters/pageNumber"
        - name: sort
          in: query
          description: Sort messages
          schema:
            type: string
            default: "sent_desc"
            enum: ["sent", "sent_desc"]
      responses:
        "200":
          description: Succesful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  conversations:
                    $ref: "#/components/schemas/Message"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /users/{user_id}/conversations/{conv_id}/messages/{mess_id}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/conversationId"
      - $ref: "#/components/parameters/messageId"
    get:
      tags:
        - messages
      summary: Retrieve detailed information about the message
      operationId: messageDetail
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

    delete:
      tags:
        - messages
      summary: Delete the message from the conversation
      operationId: deleteMessage
      responses:
        "200":
          $ref: "#/components/responses/200"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /users/{user_id}/conversations/{conv_id}/messages/{mess_id}/comments:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/conversationId"
      - $ref: "#/components/parameters/messageId"
    put:
      tags:
        - messages
      summary: set a comment for the given message
      operationId: commentMessage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  minLength: 1
                  maxLength: 1
      responses:
        "200":
          $ref: "#/components/responses/200"
        "201":
          description: "Comment created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: "#/components/schemas/Comment"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

    delete:
      tags:
        - messages
      summary: delete the comment
      operationId: uncommentMessage
      responses:
        "200":
          $ref: "#/components/responses/200"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /users/{user_id}/conversations/{conv_id}/messages/{mess_id}/forward:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/conversationId"
      - $ref: "#/components/parameters/messageId"
    post:
      tags:
        - messages
      summary: forward the message to another conversation
      operationId: forwardMessage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                conversationId:
                  $ref: "#/components/schemas/Idgrez64"
      responses:
        "201":
          description: Message forwarded
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: "#/components/schemas/Idgrez64"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"
  /users/{user_id}/groups:
    parameters:
      - $ref: "#/components/parameters/userId"
    post:
      tags:
        - groups
      summary: Create a new group chat
      description: |
        This methods allows the user to create a new group chat
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                photoId:
                  $ref: "#/components/schemas/Idgrez64"
                name:
                  type: string
                participants:
                  type: array
                  items:
                    type: string
                  uniqueItems: true
                  minItems: 0
                  maxItems: 100
      responses:
        "201":
          description: Group created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: "#/components/schemas/Idgrez64"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /users/{user_id}/groups/{group_id}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/groupId"
    put:
      tags:
        - groups
      summary: Add a new user to the group
      description: |
        This method allows the user to add one or more new member in the group
      operationId: addToGroup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                participants:
                  type: array
                  items:
                    type: string
                  uniqueItems: true
                  minItems: 1
                  maxItems: 100
      responses:
        "200":
          $ref: "#/components/responses/200"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"
    delete:
      tags:
        - groups
      summary: Leave the group
      description: |
        This method removes the user from the participants of the group specified in the parameters
      operationId: leaveGroup
      responses:
        "200":
          $ref: "#/components/responses/200"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /users/{user_id}/groups/{group_id}/name:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/groupId"
    put:
      tags:
        - groups
      summary: change or set group name
      description: |
        This method allows participants to update the group name
      operationId: setGroupName
      parameters:
        - $ref: "#/components/parameters/groupId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 16
      responses:
        "200":
          $ref: "#/components/responses/200"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /users/{user_id}/groups/{group_id}/photo:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/groupId"
    put:
      tags:
        - groups
      summary: change or set group photo
      description: |
        This method allows participants to update the group photo
      operationId: setGroupPhoto
      parameters:
        - $ref: "#/components/parameters/groupId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                imageId:
                  $ref: "#/components/schemas/Idgrez64"
      responses:
        "200":
          $ref: "#/components/responses/200"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /users/{user_id}/conversations/chats:
    parameters:
      - $ref: "#/components/parameters/userId"
    post:
      tags:
        - chats
      summary: Create a new one-to-one chat
      description: |
        This method is used to create a new one to one chat with another user of WASAText
      operationId: createChat
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/Idgrez64"

      responses:
        "201":
          description: Chat created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
              examples:
                chatExample:
                  $ref: "#/components/examples/chatExample"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

  /images:
    post:
      tags:
        - images
      summary: Upload an image in the system
      operationId: uploadImage
      requestBody:
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "406":
          $ref: "#/components/responses/406"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/default"

components:
  schemas:
    Idgrez64:
      type: integer
      format: int64
      minimum: 0
      maximum: 9007199254740991
      readOnly: true
    Idgrez32:
      type: integer
      format: int32
      minimum: 0
      maximum: 2147483647
      readOnly: true
    Image:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Idgrez64"
        width:
          $ref: "#/components/schemas/Idgrez32"
        height:
          $ref: "#/components/schemas/Idgrez32"
        fullUrl:
          type: string
          readOnly: true
          format: url

    Message:
      type: object
      required:
        - id
        - conversationId
        - authorId
        - sendAt
        - status
      properties:
        id:
          $ref: "#/components/schemas/Idgrez64"
        conversationId:
          $ref: "#/components/schemas/Idgrez64"
        authorId:
          $ref: "#/components/schemas/Idgrez64"
        sendAt:
          type: string
          format: date-time
          readOnly: true
        status:
          type: string
          enum: ["sent", "delivered", "read"]
        repliedMessageId:
          type: integer
          format: int64
          minimum: 0
          maximum: 9007199254740991
          readOnly: true
          nullable: true
        attachmentUrl:
          type: string
          format: url
          nullable: true
        content:
          type: string
          nullable: true
    Conversation:
      type: object
      required:
        - id
        - name
        - photo
        - type
      properties:
        id:
          $ref: "#/components/schemas/Idgrez64"
        name:
          type: string
          minLength: 1
          maxLength: 16
        photo:
          $ref: "#/components/schemas/Image"
        type:
          type: string
          enum: ["group", "one_to_one"]
          readOnly: true
        latestMessage:
          $ref: "#/components/schemas/Message"
    ConversationDetail:
      type: object
      allOf:
        - $ref: "#/components/schemas/Conversation"
        - type: object
          required:
            - participants
          properties:
            participants:
              type: array
              readOnly: true
              items:
                type: string
                format: identifier
    Comment:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Idgrez64"
        messageId:
          $ref: "#/components/schemas/Idgrez64"
        authorId:
          $ref: "#/components/schemas/Idgrez64"
        content:
          type: string
    User:
      type: object
      properties:
        username:
          type: string
          format: identifier
          minLength: 1
          maxLength: 16
        photo:
          $ref: "#/components/schemas/Image"
    HttpStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
          minimum: 100
          maximum: 599
        message:
          type: string
        description:
          type: string
      required:
        - code
        - message
    Pagination:
      type: object
      properties:
        page:
          type: integer
          format: int32
          minimum: 1
          maximum: 2147483647
          readOnly: true
        nextPage:
          type: string
          format: url
          nullable: true
        previousPage:
          type: string
          format: url
          nullable: true

  parameters:
    userId:
      name: user_id
      in: path
      description: Numeric id of the user
      required: true
      schema:
        $ref: "#/components/schemas/Idgrez64"
    conversationId:
      name: conv_id
      in: path
      description: Numeric id of the conversation
      required: true
      schema:
        $ref: "#/components/schemas/Idgrez64"

    groupId:
      name: group_id
      in: path
      required: true
      description: Numeric id of the group
      schema:
        $ref: "#/components/schemas/Idgrez64"

    messageId:
      name: mess_id
      in: path
      required: true
      description: Numeric id of the group
      schema:
        $ref: "#/components/schemas/Idgrez64"

    pageOffset:
      name: size
      in: query
      description: Number of returned elements per page
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 20
        default: 20
    pageNumber:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 2147483647
  responses:
    "200":
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpStatus"
          example:
            code: 200
            message: Ok
            description: All the operations went fine
    "400":
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpStatus"
          example:
            code: 400
            message: Bad request
            description: The request contains wrong parameters
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpStatus"
          example:
            code: 401
            message: Unauthorized
            description: You must do login to see your conversations
    "403":
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpStatus"
          example:
            code: 403
            message: Forbidden
            description: You can't add a user to a group where you're not a participant
    "404":
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpStatus"
          example:
            code: 404
            message: Not found
            description: The provided conversation id isn't in your conversations list
    "406":
      description: Not acceptable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpStatus"
          example:
            code: 406
            message: Not acceptable
            description: (list of available resources representation)
    "429":
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpStatus"
          example:
            code: 429
            message: Too many request
            description: Too many request, please try again later
    default:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpStatus"
          example:
            code: 500
            message: Internal server error
            description: Unexpected error
  examples:
    chatExample:
      value:
        id: 0
        name: PaoloCannone07
        photo:
          $ref: "#/components/schemas/Image"
        type: one_to_one

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
