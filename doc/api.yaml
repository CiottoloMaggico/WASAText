openapi: 3.0.3
info:
  title: WASAText - OpenAPI 3.0.3
  description: |-
    Connect with your friends effortlessly using WASAText! Send and receive messages, whether one-on-one
    or in groups, all from the convenience of your PC. Enjoy seamless conversations with text or GIFs and
    easily stay in touch through your private chats or group discussions.
  contact:
    email: fantozzi.2047034@studenti.uniroma1.it
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
servers:
  - url: 'https://api.wasatext.com/api/v1'
    description: Production server
tags:
  - name: conversations
  - name: groups
  - name: chats
  - name: messages
  - name: users
  - name: login
security:
  - bearerAuth: []
paths:
  /session:
    post:
      tags:
        - login
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: Input schema used to login a user
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Username'
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users:
    get:
      tags:
        - users
      summary: Retrieve the list of all users of WASAText
      description: |
        Return a paginated list of all users registered to WASAText
      operationId: getUsers
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/filterUsers'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                description: Returns a paginated list of WASAText users
                type: object
                required:
                  - users
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  users:
                    description: List of all WASAText users
                    type: array
                    minItems: 0
                    maxItems: 9007199254740991
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
  '/users/{user_id}':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      tags:
        - users
      summary: Get detailed information about an user
      description: |
        Returns detailed information about the user
      operationId: getUser
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                userExample:
                  $ref: '#/components/examples/userExample'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
  '/user/{user_id}/username':
    parameters:
      - $ref: '#/components/parameters/userId'
    put:
      tags:
        - users
      summary: Change the username
      description: |
        Change the username of the given user
      operationId: setMyUserName
      requestBody:
        $ref: '#/components/requestBodies/ChangeUsername'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                userExample:
                  $ref: '#/components/examples/userExample'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
  '/user/{user_id}/photo':
    parameters:
      - $ref: '#/components/parameters/userId'
    put:
      tags:
        - users
      summary: Change the user photo
      description: |
        Change the photo of the given user
      operationId: setMyPhoto
      requestBody:
        $ref: '#/components/requestBodies/ChangeUserPhoto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                userExample:
                  $ref: '#/components/examples/userExample'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
  '/users/{user_id}/chats':
    parameters:
      - $ref: '#/components/parameters/userId'
    post:
      tags:
        - chats
      summary: Create a new one-to-one chat
      description: |
        This method is used to create a new one to one chat with another user of WASAText
      operationId: createChat
      requestBody:
        $ref: '#/components/requestBodies/ChatCreation'
      responses:
        '201':
          description: Chat created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
              examples:
                chatExample:
                  $ref: '#/components/examples/chatExample'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
  '/users/{user_id}/groups':
    parameters:
      - $ref: '#/components/parameters/userId'
    post:
      tags:
        - groups
      summary: Create a new group chat
      description: |
        This methods allows the user to create a new group chat
      operationId: createGroup
      requestBody:
        $ref: '#/components/requestBodies/GroupCreation'
      responses:
        '201':
          description: Group created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
  '/users/{user_id}/groups/{group_id}':
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/groupId'
    put:
      tags:
        - groups
      summary: Add a new user to the group
      description: |
        This method allows the user to add one or more (up to 100) new member in the group
      operationId: addToGroup
      requestBody:
        $ref: '#/components/requestBodies/AddUserToGroup'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
    delete:
      tags:
        - groups
      summary: Leave the group
      description: |
        This method removes the user from the participants of the group specified in the parameters
      operationId: leaveGroup
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
  '/users/{user_id}/groups/{group_id}/name':
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/groupId'
    put:
      tags:
        - groups
      summary: change or set group name
      description: |
        This method allows participants to update the group name
      operationId: setGroupName
      requestBody:
        $ref: '#/components/requestBodies/ChangeGroupName'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
  '/users/{user_id}/groups/{group_id}/photo':
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/groupId'
    put:
      tags:
        - groups
      summary: change or set group photo
      description: |
        This method allows participants to update the group photo
      operationId: setGroupPhoto
      parameters:
        - $ref: '#/components/parameters/groupId'
      requestBody:
        $ref: '#/components/requestBodies/ChangeGroupPhoto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
  '/users/{user_id}/conversations':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      tags:
        - conversations
      summary: retrieve all the user conversations
      description: |
        This method returns a paginated list of all the conversations of the user either groups or one to one chats
      operationId: getMyConversations
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/sortConversations'
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                description: Returns a paginated list of user conversations
                type: object
                required:
                  - conversations
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  conversations:
                    description: List of all user conversations
                    type: array
                    minItems: 0
                    maxItems: 9007199254740991
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/ConversationSummary'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
    put:
      tags:
        - conversations
      summary: set all undelivered message as delivered
      description: |
        This method is used to set all the undelivered messages from all user conversations as delivered.
      operationId: setDelivered
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                description: Returns a paginated list of user conversations
                type: object
                required:
                  - conversations
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  conversations:
                    description: List of all user conversations
                    type: array
                    minItems: 0
                    maxItems: 9007199254740991
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/ConversationSummary'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
  '/users/{user_id}/conversations/{conv_id}':
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/conversationId'
    get:
      tags:
        - conversations
      summary: Retrieve the detail of a conversation
      description: |
        Returns detailed informations about the conversation provided
      operationId: getConversation
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
              examples:
                chatExample:
                  $ref: '#/components/examples/chatExample'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
  '/users/{user_id}/conversations/{conv_id}/messages':
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/conversationId'
    post:
      tags:
        - messages
      summary: send a new message to the conversation
      description: |
        send a new message to the conversation, you can send image files, text and reply to other messages
      operationId: sendMessage
      requestBody:
        $ref: '#/components/requestBodies/MessageCreation'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                messageExample:
                  $ref: '#/components/examples/messageExample'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
    put:
      tags:
        - messages
      summary: set all unseen messages to seen
      description: |
        This method marks all the undelivered/delivered messages as seen by the given user.
      operationId: setSeen
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                description: Returns a paginated list of conversation messages
                type: object
                required:
                  - messages
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  messages:
                    description: list of all the conversation messages
                    type: array
                    minItems: 0
                    maxItems: 9007199254740991
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/Message'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
    get:
      tags:
        - messages
      summary: retrieve all messages from the conversation
      description: |
        This methods returns the list of all messages of the conversation, by default sorted by descending send date-time
      operationId: getConversationMessages
      parameters:
        - $ref: '#/components/parameters/pageOffset'
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/sortMessages'
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                description: Returns a paginated list of conversation messages
                type: object
                required:
                  - messages
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  messages:
                    description: list of all the conversation messages
                    type: array
                    minItems: 0
                    maxItems: 9007199254740991
                    uniqueItems: true
                    items:
                      $ref: '#/components/schemas/Message'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
  '/users/{user_id}/conversations/{conv_id}/messages/{mess_id}':
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/conversationId'
      - $ref: '#/components/parameters/messageId'
    get:
      tags:
        - messages
      summary: Retrieve detailed information about the message
      description: |
        Returns detailed informations about the message
      operationId: messageDetail
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                messageExample:
                  $ref: '#/components/examples/messageExample'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
    delete:
      tags:
        - messages
      summary: Delete the message from the conversation
      description: |
        Delete the message from the conversation
      operationId: deleteMessage
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
  '/users/{user_id}/conversations/{conv_id}/messages/{mess_id}/comments':
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/conversationId'
      - $ref: '#/components/parameters/messageId'
    put:
      tags:
        - messages
      summary: set a comment for the given message
      description: |
        Create or update the comment for the given message
      operationId: commentMessage
      requestBody:
        $ref: '#/components/requestBodies/CommentCreation'
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
              examples:
                commentExample:
                  $ref: '#/components/examples/commentExample'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
    delete:
      tags:
        - messages
      summary: delete the comment
      description: Delete the user comment for the given message
      operationId: uncommentMessage
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
  '/users/{user_id}/conversations/{conv_id}/messages/{mess_id}/forward':
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/conversationId'
      - $ref: '#/components/parameters/messageId'
    post:
      tags:
        - messages
      summary: forward the message to another conversation
      description: Make a copy of the content of the given message and forward it to another conversation
      operationId: forwardMessage
      requestBody:
        $ref: '#/components/requestBodies/ForwardMessage'
      responses:
        '201':
          description: Message forwarded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                messageExample:
                  $ref: '#/components/examples/messageExample'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/default'
components:
  schemas:
    CustomInt64:
      description: Custom integer64 type to avoid minimum and maximum error
      type: integer
      format: int64
      minimum: 0
      maximum: 9007199254740991
    CustomInt32:
      description: Custom integer32 type to avoid minimum and maximum error
      type: integer
      format: int32
      minimum: 0
      maximum: 2147483647
    ReadOnlyInt64:
      description: Custom integer64 readonly type to avoid minimum and maximum error
      type: integer
      format: int64
      minimum: 0
      maximum: 9007199254740991
      readOnly: true
    ReadOnlyInt32:
      description: Custom integer32 readonly type to avoid minimum and maximum error
      type: integer
      format: int32
      minimum: 0
      maximum: 2147483647
      readOnly: true
    ReadOnlyUrl:
      description: Custom string type to use for urls
      type: string
      format: url
      readOnly: true
      maxLength: 500
    Username:
      description: users "Username" field type
      type: string
      format: identifier
      minLength: 3
      maxLength: 16
      pattern: ^.*?$
    ConversationName:
      description: conversations "name" field type
      type: string
      minLength: 3
      maxLength: 16
      pattern: ^.*?$
    ConversationType:
      description: conversations type to specify its type
      type: string
      enum:
        - group
        - one_to_one
      readOnly: true
    MessageStatus:
      description: list of possible statuses of a message
      type: string
      enum:
        - sent
        - delivered
        - read
      default: sent
    HttpStatusCode:
      description: http status code type
      type: integer
      format: int32
      minimum: 100
      maximum: 599
      readOnly: true
    PaginationOffset:
      description: used to specify how many items per page are displayed in paginated responses
      type: integer
      format: int32
      minimum: 0
      maximum: 20
      default: 20
    ImageType:
      description: Image data type for request bodies
      type: string
      format: binary
      minLength: 1
      maxLength: 4096
    User:
      description: User type
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
        photo:
          $ref: '#/components/schemas/Image'
    Image:
      description: Image type
      type: object
      properties:
        id:
          $ref: '#/components/schemas/CustomInt64'
        width:
          $ref: '#/components/schemas/CustomInt32'
        height:
          $ref: '#/components/schemas/CustomInt32'
        fullUrl:
          $ref: '#/components/schemas/ReadOnlyUrl'
    ConversationSummary:
      description: Type used to return less detailed informations about a conversation
      type: object
      required:
        - id
        - name
        - photo
        - type
      properties:
        id:
          $ref: '#/components/schemas/CustomInt64'
        name:
          $ref: '#/components/schemas/ConversationName'
        photo:
          $ref: '#/components/schemas/Image'
        type:
          $ref: '#/components/schemas/ConversationType'
        latestMessage:
          $ref: '#/components/schemas/Message'
    Conversation:
      description: Conversation type for detailed info about a conversation
      type: object
      required:
        - id
        - name
        - photo
        - type
        - participants
      properties:
        id:
          $ref: '#/components/schemas/CustomInt64'
        name:
          $ref: '#/components/schemas/ConversationName'
        photo:
          $ref: '#/components/schemas/Image'
        type:
          $ref: '#/components/schemas/ConversationType'
        latestMessage:
          $ref: '#/components/schemas/Message'
        participants:
          description: List of group participants usernames
          type: array
          readOnly: true
          uniqueItems: true
          minItems: 1
          maxItems: 200
          items:
            $ref: '#/components/schemas/Username'
    Message:
      description: Message type
      type: object
      required:
        - id
        - conversationId
        - authorId
        - sendAt
        - status
      properties:
        id:
          $ref: '#/components/schemas/CustomInt64'
        conversationId:
          $ref: '#/components/schemas/CustomInt64'
        authorId:
          $ref: '#/components/schemas/CustomInt64'
        sendAt:
          description: timestamp of when the message was sent
          type: string
          format: date-time
          readOnly: true
          minLength: 1
          maxLength: 100
        status:
          $ref: '#/components/schemas/MessageStatus'
        repliedMessageId:
          $ref: '#/components/schemas/CustomInt64'
        attachmentUrl:
          $ref: '#/components/schemas/ReadOnlyUrl'
        content:
          description: text content of the message
          type: string
          minLength: 1
          maxLength: 4096
          pattern: ^.*?$
    Comment:
      description: Comment type
      type: object
      properties:
        id:
          $ref: '#/components/schemas/CustomInt64'
        messageId:
          $ref: '#/components/schemas/CustomInt64'
        authorId:
          $ref: '#/components/schemas/CustomInt64'
        content:
          description: A 1 emoji comment
          type: string
          minLength: 1
          maxLength: 1
          pattern: ^.*?$
    HttpStatus:
      description: Blueprint for responses without content or http errors
      type: object
      required:
        - code
        - message
      properties:
        code:
          $ref: '#/components/schemas/HttpStatusCode'
        message:
          description: Text description of the error that occurred
          type: string
          minLength: 1
          maxLength: 200
          pattern: ^.*?$
        description:
          description: Detailed description of the status code and possibly why it was raised
          type: string
          minLength: 0
          maxLength: 1024
          pattern: ^.*?$
    Pagination:
      description: Blueprint used in paginated responses
      type: object
      required:
        - page
      properties:
        page:
          $ref: '#/components/schemas/ReadOnlyInt32'
        nextPage:
          $ref: '#/components/schemas/ReadOnlyUrl'
        previousPage:
          $ref: '#/components/schemas/ReadOnlyUrl'
  parameters:
    userId:
      name: user_id
      in: path
      description: Numeric id of the user
      required: true
      schema:
        $ref: '#/components/schemas/ReadOnlyInt64'
    conversationId:
      name: conv_id
      in: path
      description: Numeric id of the conversation
      required: true
      schema:
        $ref: '#/components/schemas/ReadOnlyInt64'
    groupId:
      name: group_id
      in: path
      required: true
      description: Numeric id of the group
      schema:
        $ref: '#/components/schemas/ReadOnlyInt64'
    messageId:
      name: mess_id
      in: path
      required: true
      description: Numeric id of the group
      schema:
        $ref: '#/components/schemas/ReadOnlyInt64'
    pageOffset:
      name: size
      in: query
      description: Number of returned elements per page
      required: false
      schema:
        $ref: '#/components/schemas/PaginationOffset'
    pageNumber:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        $ref: '#/components/schemas/CustomInt32'
    sortConversations:
      name: sort
      description: 'sort the returned set by read/unread property, first unread then read or otherwise'
      in: query
      schema:
        type: string
        default: read
        enum:
          - read
          - read_desc
    sortMessages:
      name: sort
      in: query
      description: Sort messages
      schema:
        type: string
        default: sent_desc
        enum:
          - sent
          - sent_desc
    filterUsers:
      name: filter
      in: query
      description: Filter users by username
      schema:
        $ref: '#/components/schemas/Username'
  requestBodies:
    ChangeGroupPhoto:
      content:
        application/json:
          schema:
            description: Input schema used to change the photo of a group
            type: object
            properties:
              image:
                $ref: '#/components/schemas/ImageType'
    ChangeUserPhoto:
      content:
        application/json:
          schema:
            description: Input schema used to change the profile photo of the signed in user
            type: object
            properties:
              image:
                $ref: '#/components/schemas/ImageType'
    ChangeGroupName:
      content:
        application/json:
          schema:
            description: Input schema used to change the name of a group
            type: object
            properties:
              name:
                $ref: '#/components/schemas/ConversationName'
    ChangeUsername:
      content:
        application/json:
          schema:
            description: Input schema used to change the username of the signed-in user
            type: object
            properties:
              name:
                $ref: '#/components/schemas/Username'
    GroupCreation:
      required: true
      content:
        application/json:
          schema:
            description: Input schema used to create a new group by the signed-in user
            type: object
            required:
              - name
            properties:
              name:
                $ref: '#/components/schemas/ConversationName'
              image:
                $ref: '#/components/schemas/ImageType'
              participants:
                description: List of usernames to add in the group
                type: array
                minItems: 0
                maxItems: 100
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/Username'
    AddUserToGroup:
      required: true
      content:
        application/json:
          schema:
            description: Input schema used to add new participants to a group
            type: object
            required:
              - participants
            properties:
              participants:
                description: List of usernames to add in the group
                type: array
                minItems: 0
                maxItems: 100
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/Username'
    ChatCreation:
      required: true
      content:
        application/json:
          schema:
            description: Input schema used to create a new chat by the signed-in user
            type: object
            required:
              - recipientUsername
            properties:
              recipientUsername:
                $ref: '#/components/schemas/Username'
    MessageCreation:
      content:
        application/json:
          schema:
            description: Input schema used to send a message by the signed-in user
            type: object
            minProperties: 1
            properties:
              attachment:
                $ref: '#/components/schemas/ImageType'
              content:
                pattern: ^.*?$
                description: Text content of the message
                type: string
                minLength: 1
                maxLength: 4096
              repliedMessageId:
                $ref: '#/components/schemas/CustomInt64'
    CommentCreation:
      content:
        application/json:
          schema:
            description: Input schema used to set or update the user comment for a message
            type: object
            properties:
              comment:
                description: A 1 emoji comment
                type: string
                minLength: 1
                maxLength: 1
                pattern: ^.*?$
    ForwardMessage:
      content:
        application/json:
          schema:
            description: Input schema used to forward a message to another conversation
            type: object
            properties:
              destConversationId:
                $ref: '#/components/schemas/CustomInt64'
  responses:
    '200':
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpStatus'
          example:
            code: 200
            message: Ok
            description: All the operations went fine
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpStatus'
          example:
            code: 400
            message: Bad request
            description: The request contains wrong parameters
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpStatus'
          example:
            code: 401
            message: Unauthorized
            description: You must do login to see your conversations
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpStatus'
          example:
            code: 403
            message: Forbidden
            description: You can't add a user to a group where you're not a participant
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpStatus'
          example:
            code: 404
            message: Not found
            description: The provided conversation id isn't in your conversations list
    '406':
      description: Not acceptable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpStatus'
          example:
            code: 406
            message: Not acceptable
            description: (list of available resources representation)
    '429':
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpStatus'
          example:
            code: 429
            message: Too many request
            description: 'Too many request, please try again later'
    default:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpStatus'
          example:
            code: 500
            message: Internal server error
            description: Unexpected error
  examples:
    chatExample:
      value:
        id: 0
        name: PaoloCannone07
        photo:
          $ref: '#/components/schemas/Image'
        type: one_to_one
        participants:
          - PaoloCannone07
          - GiorgioSpek
    messageExample:
      value:
        id: 12
        conversationId: 1
        authorId: 12
        sendAt: '2024-11-18T14:42:08.062Z'
        status: sent
        repliedMessageId: 11
        attachmentUrl: 'https://www.wasatext.com/images/123'
        content: ciao come va
    commentExample:
      value:
        id: 20
        messageId: 12
        authorId: 12
        content: "\U0001F601"
    userExample:
      value:
        username: PaoloCannone07
        photo:
          id: 532
          width: 1024
          height: 1024
          fullUrl: 'https://wasatext.com/images/532'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
